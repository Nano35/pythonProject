import sqlite3
from email.policy import default

import requests

import telebot
from telebot import types

import config

bot = telebot.TeleBot(config.get_api_key())
conn = sqlite3.connect('db/python.db', check_same_thread=False)
cursor = conn.cursor()

global fio
global birthday
global when_i_birth
global my_present
global my_future
global file_path

STATE_WAITING_FOR_ANSWER = 0
ANSWER_RECEIVED = 1

@bot.message_handler(commands=['start']) #–∫–æ–º–∞–Ω–¥—ã
def send_welcome(message):
    bot.reply_to(message, """\
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–æ–Ω–¥–∞: "–ò–∑–º–µ–Ω–∏ –û–¥–Ω—É –ñ–∏–∑–Ω—å"
–Ø –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø—Ä–∏–µ–º–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∏—Ö –ø—Ä–∏–µ–º–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–µ–º —É–∂–µ –≤ –Ω–æ–≤–æ–π —Å–µ–º—å–µ\
""")
    inline_markup = types.InlineKeyboardMarkup()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://changeonelife.ru/about/mission/')
    hi_btn = types.KeyboardButton("–ü—Ä–∏–≤–µ—Ç")
    inline_markup.add(btn1)
    keyboard.add(hi_btn)
    bot.send_message(message.from_user.id, "–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç", reply_markup = inline_markup)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:" , reply_markup=keyboard)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
   if message.text == '–ü—Ä–∏–≤–µ—Ç':
       if check_user(message.from_user.id):
           bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
       else:
        add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
       keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
       reg_btn = types.KeyboardButton("üìï –°–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∂–∏–∑–Ω–∏")
       keyboard.add(reg_btn)
       bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
   elif message.text == 'üìï –°–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∂–∏–∑–Ω–∏':
       bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
       bot.register_next_step_handler(message, add_child_data)

def add_child_data(message):
    global fio
    fio = message.text
    bot.reply_to(message, f"–§–ò–û —Ä–µ–±–µ–Ω–∫–∞: {fio}")
    bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–±–µ–Ω–∫–∞")
    bot.register_next_step_handler(message, add_child_photo)

def add_child_photo(message):
    file = bot.get_file(message.photo[-1].file_id)
    global file_path
    file_path = file.file_path  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–¥
    file_url = f"https://api.telegram.org/file/bot{config.get_api_key()}/{file_path}" # –†–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–º–æ–∂–µ—Ç–µ –ø–æ –Ω–µ–º—É –ø–µ—Ä–µ–π—Ç–∏ —Ç–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –æ–Ω –≤—ã–≤–æ–¥–∏—Ç—Å—è) –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ë–î –¢–ê–ö –ö–ê–ö –ü–ê–õ–ò–¢–°–Ø BOT API KEY
    print(file_url)
    response = requests.get(file_url, stream=True)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏

    with open(f"photo_{file.file_id}.jpg", "wb") as f:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞:")
    bot.register_next_step_handler(message, add_birthday)

def add_birthday(message):
    global birthday
    birthday = message.text
    bot.reply_to(message, f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞: {birthday}")
    bot.send_message(message.from_user.id, """*–ú–æ—ë –ø—Ä–æ—à–ª–æ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ—à–ª–æ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –∫–æ–≥–¥–∞ –æ–Ω —Ä–æ–¥–∏–ª—Å—è –∏ –≥–¥–µ –æ–Ω —Ä–æ–¥–∏–ª—Å—è\)""", parse_mode="MarkdownV2")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–æ–≥–¥–∞ –æ–Ω —Ä–æ–¥–∏–ª—Å—è –∏ –≥–¥–µ –æ–Ω —Ä–æ–¥–∏–ª—Å—è", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_when_i_birth)

def add_when_i_birth(message):
    global when_i_birth
    when_i_birth = message.text
    bot.send_message(message.from_user.id, """*–ú–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—Å—Ç–æ—è—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –≥–¥–µ –æ–Ω —Å–µ–π—á–∞—Å –∂–∏–≤–µ—Ç, –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å –Ω–∏–º, —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∏ –µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è\)""", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_my_present)

def add_my_present(message):
    global my_present
    my_present = message.text
    bot.send_message(message.from_user.id, """*–ú–æ—ë –±—É–¥—É—â–µ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±—É–¥—É—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –∫–µ–º –æ–Ω —Ö–æ—á–µ—Ç –±—ã—Ç—å, –æ –µ–≥–æ –±—É–¥—É—â–µ–π —Å–µ–º—å–µ, –æ –µ–≥–æ –±—É–¥—É—â–µ–º –¥–æ–º–µ\)""", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_child_db)

def add_child_db(message): # –°–æ—Ö—Ä–∞–Ω—è–µ–º path –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    global my_future
    my_future = message.text
    resume = when_i_birth + "\n" + my_present + "\n" + my_future

    cursor.execute("INSERT INTO child (fio, birthday, resume, photo) VALUES (?, ?, ?, ?)",
                   (fio, birthday, resume, file_path))  # user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    conn.commit()
    conn.close()

def check_user(user_id):
    cursor.execute('SELECT 1 FROM test WHERE user_id = ? LIMIT 1', (user_id,))
    result = cursor.fetchone()
    return result

def add_user(user_id: int, user_name: str, user_surname: str, username: str):

    cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
                   (user_id, user_name, user_surname, username))
    conn.commit()

bot.infinity_polling()
