import sqlite3
from email.policy import default
import requests
import os
import tempfile
from docx import Document
from dotenv import load_dotenv
from telebot import types
from docx.shared import Inches
load_dotenv()

import requests

import telebot
from telebot import types

import config

bot = telebot.TeleBot(config.get_api_key())
conn = sqlite3.connect('db/python.db', check_same_thread=False)
cursor = conn.cursor()

global fio
global birthday
global when_i_birth
global my_present
global my_future
global file_path

STATE_WAITING_FOR_ANSWER = 0
ANSWER_RECEIVED = 1

@bot.message_handler(commands=['start']) #–∫–æ–º–∞–Ω–¥—ã
def send_welcome(message):
    bot.reply_to(message, """\
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–æ–Ω–¥–∞: "–ò–∑–º–µ–Ω–∏ –û–¥–Ω—É –ñ–∏–∑–Ω—å"
–Ø –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø—Ä–∏–µ–º–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∏—Ö –ø—Ä–∏–µ–º–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–µ–º —É–∂–µ –≤ –Ω–æ–≤–æ–π —Å–µ–º—å–µ\
""")
    inline_markup = types.InlineKeyboardMarkup()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://changeonelife.ru/about/mission/')
    hi_btn = types.KeyboardButton("–ü—Ä–∏–≤–µ—Ç")
    inline_markup.add(btn1)
    keyboard.add(hi_btn)
    bot.send_message(message.from_user.id, "–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç", reply_markup = inline_markup)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:" , reply_markup=keyboard)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
   if message.text == '–ü—Ä–∏–≤–µ—Ç':
       if check_user(message.from_user.id):
           bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
       else:
        add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –í–∞—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
       keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
       reg_btn = types.KeyboardButton("üìï –°–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∂–∏–∑–Ω–∏")
       keyboard.add(reg_btn)
       bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
   elif message.text == 'üìï –°–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∂–∏–∑–Ω–∏':
       bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
       bot.register_next_step_handler(message, add_child_data)


def add_child_data(message):
    global fio
    fio = message.text
    bot.reply_to(message, f"–§–ò–û —Ä–µ–±–µ–Ω–∫–∞: {fio}")
    bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–±–µ–Ω–∫–∞")
    bot.register_next_step_handler(message, add_child_photo)

def add_child_photo(message):
    file = bot.get_file(message.photo[-1].file_id)
    global file_path
    file_path = file.file_path  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–¥
    global file_url
    file_url = f"https://api.telegram.org/file/bot{config.get_api_key()}/{file_path}" # –†–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–º–æ–∂–µ—Ç–µ –ø–æ –Ω–µ–º—É –ø–µ—Ä–µ–π—Ç–∏ —Ç–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –æ–Ω –≤—ã–≤–æ–¥–∏—Ç—Å—è) –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ë–î –¢–ê–ö –ö–ê–ö –ü–ê–õ–ò–¢–°–Ø BOT API KEY
    print(file_url)
    response = requests.get(file_url, stream=True)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏

    with open(f"photo_{file.file_id}.jpg", "wb") as f:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞:")
    bot.register_next_step_handler(message, add_birthday)

def add_birthday(message):
    global birthday
    birthday = message.text
    bot.reply_to(message, f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞: {birthday}")
    bot.send_message(message.from_user.id, """*–ú–æ—ë –ø—Ä–æ—à–ª–æ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ—à–ª–æ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –∫–æ–≥–¥–∞ –æ–Ω —Ä–æ–¥–∏–ª—Å—è –∏ –≥–¥–µ –æ–Ω —Ä–æ–¥–∏–ª—Å—è\)""", parse_mode="MarkdownV2")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–æ–≥–¥–∞ –æ–Ω —Ä–æ–¥–∏–ª—Å—è –∏ –≥–¥–µ –æ–Ω —Ä–æ–¥–∏–ª—Å—è", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_when_i_birth)

def add_when_i_birth(message):
    global when_i_birth
    when_i_birth = message.text
    bot.send_message(message.from_user.id, """*–ú–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—Å—Ç–æ—è—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –≥–¥–µ –æ–Ω —Å–µ–π—á–∞—Å –∂–∏–≤–µ—Ç, –ª—é–¥–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å –Ω–∏–º, —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∏ –µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è\)""", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_my_present)

def add_my_present(message):
    global my_present
    my_present = message.text
    bot.send_message(message.from_user.id, """*–ú–æ—ë –±—É–¥—É—â–µ–µ*
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –±—É–¥—É—â–µ–º —Ä–µ–±–µ–Ω–∫–∞ \(–æ —Ç–æ–º –∫–µ–º –æ–Ω —Ö–æ—á–µ—Ç –±—ã—Ç—å, –æ –µ–≥–æ –±—É–¥—É—â–µ–π —Å–µ–º—å–µ, –æ –µ–≥–æ –±—É–¥—É—â–µ–º –¥–æ–º–µ\)""", parse_mode="MarkdownV2")
    bot.register_next_step_handler(message, add_child_db)


#–°–û–ó–î–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê
def finish(message):
    chat_id = message.chat.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç word")
    keyboard.add(button)

    msg = bot.send_message(
        chat_id,
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
        reply_markup=keyboard
        )
    bot.register_next_step_handler(msg, intro_text_handler)
#–°–û–ó–î–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê
def intro_text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞"""
    chat_id = message.chat.id
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        document = generate_document()
        msg = bot.send_document(chat_id, document)
        bot.register_next_step_handler(msg, intro_text_handler)
    except Exception as e:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: " + str(e))

#–î–ï–õ–ê–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ó –°–°–´–õ–ö–ò
def insert_image_from_url(document, image_url, width=None):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç docx –ø–æ URL-—Å—Å—ã–ª–∫–µ.

    Args:
        document: –û–±—ä–µ–∫—Ç Document –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-docx.
        image_url: URL-—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥—é–π–º–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """

    try:
        response = requests.get(image_url, stream=True)
        response.raise_for_status()

        with open('temp_image.jpg', 'wb') as out_file:
            for chunk in response.iter_content(chunk_size=8192):
                out_file.write(chunk)

        document.add_picture('temp_image.jpg', width=Inches(width) if width else None)
        os.remove('temp_image.jpg')

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
#–°–û–ó–î–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê
def generate_document():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        doc = Document()
        image_url = file_url
        doc.add_heading('–ö–Ω–∏–≥–∞ –∂–∏–∑–Ω–∏', level=0)
        doc.add_paragraph('–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–µ–º–Ω—ã–º —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∏—Ö –ø—Ä–∏–µ–º–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–µ–º —É–∂–µ –≤ –Ω–æ–≤–æ–π —Å–µ–º—å–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å —ç—Ç–æ –≤ –≤–∏–¥–µ "–ö–Ω–∏–≥–∏ –∂–∏–∑–Ω–∏" - –∞–ª—å–±–æ–º–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏')
        doc.add_heading('–í–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å:', level=1)
        doc.add_paragraph(fio, style = 'List Number')
        doc.add_paragraph(birthday, style = 'List Number')
        insert_image_from_url(doc, image_url, width=1.25)
        doc.add_heading('–ú–æ–µ –ø—Ä–æ—à–ª–æ–µ:', level=1)
        doc.add_paragraph(when_i_birth)
        doc.add_heading('–ú–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ:', level=1)
        doc.add_paragraph(my_present)
        doc.add_heading('–ú–æ–µ –±—É–¥—É—â–µ–µ:', level=1)
        doc.add_paragraph(my_future)
        with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as f:
            document_name = f.name
            doc.save(document_name)
            return open(document_name, 'rb')
    except Exception as e:
        raise Exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: " + str(e))




def add_child_db(message): # –°–æ—Ö—Ä–∞–Ω—è–µ–º path –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    global my_future
    my_future = message.text
    resume = when_i_birth + "\n" + my_present + "\n" + my_future

    cursor.execute("INSERT INTO child (fio, birthday, resume, photo) VALUES (?, ?, ?, ?)",
                   (fio, birthday, resume, file_path))  # user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    conn.commit()
    conn.close()
    #–æ—Ç—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Ä–¥–∞
    bot.register_next_step_handler(message, finish)
def check_user(user_id):
    cursor.execute('SELECT 1 FROM test WHERE user_id = ? LIMIT 1', (user_id,))
    result = cursor.fetchone()
    return result

def add_user(user_id: int, user_name: str, user_surname: str, username: str):

    cursor.execute('INSERT INTO test (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?)',
                   (user_id, user_name, user_surname, username))
    conn.commit()













if __name__ == '__main__':
    bot.polling()